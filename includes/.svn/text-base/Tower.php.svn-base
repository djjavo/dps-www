<?php
/**
 * Tower Images Class
 * 
 * Retrieves front page banner images from the database.
 * @package RaWWebsite
 * @author James Deane
 * @todo Merge this into Featured class
 */
class Tower{
	protected $towerid;
	protected $title;
	protected $link;
	protected $image;

	/**
	 * Retrieve banner ID
	 * @return int The id of the banner in the database.
	 */
	public function get_towerid(){
		return $this->towerid;
	}

	/**
	 * Return banner title
	 * @return string The title of the banner
	 */
	public function get_title(){
		return $this->title;
	}

	/**
	 * Return banner link
	 *
	 * @return string The url to which the banner should link to.
	 * Urls are relative to the installation directory of the website.
	 */
	public function get_link(){
		return $this->link;
	}

	/**
	 * Return banner image filename
	 *
	 * @return string The file name of the banner image.
	 */
	public function get_image(){
		return $this->image;
	}

	/**
	 * Pick pseudo-random banner
	 *
	 * @return banner Banner object of a random active banner in the database.
	 * @param int $not If specified, banners wich match this featureid will not be picked.
	 * Used so that normal and tower banners are not both shown for the same thing.
	 */
	public static function pick($not = NULL){
		if ($not != NULL) {
			$where = "featureid != ". $not ." AND ";
		} else {
			$where = '';
		}
		$result = RawDB::query("SELECT * FROM web_towers WHERE ". $where ."active = 1 ORDER BY RANDOM() LIMIT 1");
		if (pg_num_rows($result))
			return pg_fetch_object($result,null,'Tower');
		else
			return self::get(0);
	}

	/**
	 * Retrieve specific banner
	 *
	 * @return banner Banner object for the given banner id.
	 * @param int $towerid The id of the banner in the database.
	 */
	public static function get($towerid){
		if(is_numeric($towerid)){
	                $result = RawDB::query("SELECT * FROM web_towers WHERE towerid = '".$towerid."' LIMIT 1");
	                if (pg_num_rows($result))
                        return pg_fetch_object($result,null,'Tower');
		}
	}

	/**
	 * Pick random banner, weighted
	 *
	 * NOT YET IMPLEMENTED.
	 *
	 * Banners are weighted by their 'weighting'.
	 *
	 * eg, A banner with weighting 4 is twice as likely to be picked as one with
	 * weighting 2.
	 * @return banner Banner object of a random active banner in the database.
	 * @todo Implement this
	 */
	public static function pick_weighted(){

	}
}
?>
