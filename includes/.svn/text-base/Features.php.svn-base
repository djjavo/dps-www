<?php
class Features {

	/**
	 * Pick pseudo-random banner
	 *
	 * @return banner Banner object of a random active banner in the database.
	 */
	public static function pick(){
		$result = RawDB::query("SELECT * FROM web_features WHERE active=TRUE ORDER BY RANDOM() LIMIT 1;");
		if(!pg_num_rows($result))
			trigger_error("Feature information retrieval failed",E_USER_WARNING);
		return pg_fetch_object($result,null,'Featured');
	}
    
	/**
	 * Retrieve specific banner
	 *
	 * @return banner Banner object for the given banner id.
	 * @param int $featureid The id of the banner in the database.
	 */
	public static function get($featureid){
		if(is_numeric($featureid)){
			$result = RawDB::query("SELECT * FROM web_features WHERE featureid = '".$featureid."'");
			if(pg_num_rows($result))
				return pg_fetch_object($result,null,'Featured');
		}
	}

	/**
	 * Pick random banner, weighted
	 *
	 * Banners are weighted by their 'weighting'.
	 *
	 * eg, A banner with weighting 4 is twice as likely to be picked as one with
	 * weighting 2.
	 * @return banner Banner object of a random active banner in the database.
	 */
	public static function pick_weighted(){
		$result = RawDB::query("SELECT featureid,weighting FROM web_features WHERE active=TRUE ORDER BY weighting DESC;");
		$features = pg_fetch_all($result);
		$x = pg_num_rows($result);
		$total = 0;
		for ($i = 0; $i < $x; $i++) {
			$total += $features[$i]['weighting'];
		}
		$random = rand(1,$total);
		$total = 0;
		for ($i = 0; $i < $x; $i++) {
			$total += $features[$i]['weighting'];
			if ($random <= $total) {
				return self::get($features[$i]['featureid']);
			}
		}
	}

	public static function pick_several($limit = 4) {
		$result = RawDB::query("SELECT * FROM web_features WHERE active=TRUE ORDER BY weighting DESC, RANDOM() LIMIT ".$limit.";");
		if(!pg_num_rows($result))
			trigger_error("Feature information retrieval failed",E_USER_WARNING);
		$return = array();
		while ($feature = pg_fetch_object($result,null,'Featured')) {
			$return[] = $feature;
		}
		return $return;
	}

	public static function get_all() {
		$result = RawDB::query("SELECT * FROM web_features ORDER BY active DESC, weighting DESC;");
		if(!pg_num_rows($result))
			trigger_error("Feature information retrieval failed",E_USER_WARNING);
		$return = array();
		while ($feature = pg_fetch_object($result,null,'Featured')) {
			$return[] = $feature;
		}
		return $return;
	}
}
?>
