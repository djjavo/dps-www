<?php
class WebcamHistory{
	private static function image_filename($webcam,$timestamp){
		switch($webcam){
			case 'WEBCAMS_CAM_STUDIO1-DJ':
				return  "http://webcams.radio.warwick.ac.uk/archive/studio1-dj/".date("Y-m-d\TG:i:sT",$timestamp)."?overlay=true";
			case 'WEBCAMS_CAM_STUDIO1-GUEST':
				return  "http://webcams.radio.warwick.ac.uk/archive/studio1-guest/".date("Y-m-d\TG:i:sT",$timestamp)."?overlay=true";	
			case 'WEBCAMS_CAM_STUDIO1-DESK':
				return  "http://webcams.radio.warwick.ac.uk/archive/studio1-desk/".date("Y-m-d\TG:i:sT",$timestamp)."?overlay=true";
			case 'WEBCAMS_CAM_STUDIO2-DJ':
				return  "http://webcams.radio.warwick.ac.uk/archive/studio2-dj/".date("Y-m-d\TG:i:sT",$timestamp)."?overlay=true";
			case 'WEBCAMS_CAM_STUDIO2-GUEST':
				return  "http://webcams.radio.warwick.ac.uk/archive/studio2-guest/".date("Y-m-d\TG:i:sT",$timestamp)."?overlay=true";
			case 'WEBCAMS_CAM_STUDIO2-DESK':
				return  "http://webcams.radio.warwick.ac.uk/archive/studio2-desk/".date("Y-m-d\TG:i:sT",$timestamp)."?overlay=true";
			case 'WEBCAMS_CAM_EDIT':
				return  "http://webcams.radio.warwick.ac.uk/archive/edit/".date("Y-m-d\TG:i:sT",$timestamp)."?overlay=true";
			case 'WEBCAMS_CAM_WTV':
				return  "http://webcams.radio.warwick.ac.uk/archive/wtv/".date("Y-m-d\TG:i:sT",$timestamp)."?overlay=true";
			case 'WEBCAMS_CAM_CTA':
				return  "http://webcams.radio.warwick.ac.uk/archive/cta/".date("Y-m-d\TG:i:sT",$timestamp)."?overlay=true";
			case 'WEBCAMS_CAM_STORAGE':
				return  "http://webcams.radio.warwick.ac.uk/archive/storage/".date("Y-m-d\TG:i:sT",$timestamp)."?overlay=true";
			case 'WEBCAMS_CAM_FOYER':
				return  "http://webcams.radio.warwick.ac.uk/archive/foyer/".date("Y-m-d\TG:i:sT",$timestamp)."?overlay=true";
			default:
				trigger_error("Invalid Camera",E_USER_ERROR);
		}
		
	}
	private static function find_image($webcam,$timestamp){

		if(@(fopen(self::image_filename($webcam,$timestamp),"r"))){
			return $timestamp;
		}else{
			for($i=$timestamp;$i>=$timestamp-30;$i--){
				if(@(fopen(self::image_filename($webcam,$i),"r")))
					return $i;
			}
			for($i=$timestamp;$i<=$timestamp+30;$i++){
				if(@(fopen(self::image_filename($webcam,$i),"r")))
					return $i;
			}
			return false;
		}
	}
	private static function data($webcam,$timestamp){
		$actual_timestamp = self::find_image($webcam,$timestamp);
		if(!$actual_timestamp) trigger_error("No Image!",E_USER_ERROR);
		return imagecreatefromjpeg(self::image_filename($webcam,$actual_timestamp));
	}
	private static function resize($image,$size){
		switch($size){
			case WEBCAMS_SIZE_FULL:
				return Images::resize_proportionaly($image,640,480);
			case WEBCAMS_SIZE_SMALL:
				return Images::resize_proportionaly($image,320,240);
			case WEBCAMS_SIZE_THUMB:
				return Images::resize_proportionaly($image,160,120);
			default:
				trigger_error("Invalid Webcam Size",E_USER_ERROR);
		}
	}
	public static function in_archive($webcam,$timestamp){
		//if($timestamp > time()) return false;
		//return (bool) self::find_image($webcam,$timestamp);
		return true;
	}
	public static function cam($webcam,$timestamp,$size = WEBCAMS_SIZE_THUMB){
		return imagejpeg(self::resize(self::data($webcam,$timestamp),$size));
        //return false;
	}
}	
