<?php
class Poll{
	
	public static function get_candidates(){
		$result = RawDB::query("SELECT * FROM web_polling_candidates");
		$array = array();
		while($object = pg_fetch_object($result,NULL,'Candidate'))
			$array[] = $object;
		return $array;
	}
	
	public static function get_candidate($candidate_id){
		if(!is_numeric($candidate_id))	return false;
		$result = RawDB::query("SELECT * FROM web_polling_candidates WHERE candidate_id = '".$candidate_id."'");
		if(!pg_num_rows($result))		return false;
		return pg_fetch_object($result,NULL,'Candidate');
	}

	public static function get_votes(){
		$result = RawDB::query("SELECT COUNT(1) AS votes, web_polling_candidates.* FROM web_polling_votes INNER JOIN web_polling_candidates 
		USING(candidate_id) WHERE web_polling_votes.verified = TRUE GROUP BY web_polling_votes.candidate_id, web_polling_votes.name ORDER BY count DESC;");
	
		$array = array();
		while($object = pg_fetch_object($result,null,'Candidate'))
			$array[] = $object;
		return $array;
	}
	
	public static function add_candidate($candidate_object) {
		return RawDB::query("INSERT INTO web_polling_candidates (name) VALUES ('".pg_escape_string($candidate_object->get_name())."');");	
	}

	/*
	public static function print_vote_form() {
			
		$result = RawDB::query("SELECT * FROM {'web_vote_cand_cands'}");
	
		if($result != FALSE) {
			echo "<br>\n";
			
			echo "To place your vote, select the candidate you wish to vote for and supply your"
			. " Warwick email address. You should use your email of the form <b>joe.bloggs@warwick.ac.uk</b> or"
			. " <b>a.b.smith@warwick.ac.uk</b>. This is to ensure a fair 1 vote per person!\n";
			
			echo "<br><br>\n";
			echo "<form action='" . $_SERVER['PHP_SELF'] . "' method='POST'>\n";
			
			echo "<div align='center'>\n";
			echo "<table border='0' cellpadding='2'>\n";
			
			while( $row = pg_fetch_assoc($result) )
			{
			echo "<tr><td>\n";
			
			echo "<input type='radio' name='cand_vote_id' value='" . $row['cand_id'] . "' id='cand_" . $row['cand_id'] . "' />";
			echo "<label for='cand_" . $row['cand_id'] . "'>" . $row['name'] . "</label><br />\n";
			
			echo "</td></tr>\n";
			}
			echo "</table>\n";
			echo "Your email:<input type='text' size='30' name='vote_email' value='" . @$_POST['vote_email'] . "' /><br />\n";
					
			echo "<input type='submit' value='Vote!'/><br>\n";
			echo "</form></div>";
			
		}else{
			echo "database error<br />\n";
		}
	}
	*/
	public static function is_valid_email($email){
		if(empty($email))	return false;
		return ($email == filter_var($email, FILTER_VALIDATE_EMAIL));
	}
	public static function is_warwick_email($email){
		return self::is_valid_email($email) && preg_match("/@warwick.ac.uk$/i",$email);
	}
	public static function has_previous_voted($email){
		return (bool) pg_fetch_result(RawDB::query("SELECT COUNT(1) FROM web_polling_votes WHERE email='".pg_escape_string($email)."'"),0,0);
	}
	public static function verify_vote($email, $verification_code) {
		
		if(!self::is_valid_email($email))						throw new UserError("Link invalid");
		
		if(!preg_match("/^[a-z0-9]{32}$/",$verification_code))	throw new UserError("Link invalid");
	
		$result = RawDB::query("UPDATE web_polling_votes SET verified = true WHERE email = '".pg_escape_string($email)."' AND verification_code = '".pg_escape_string($verification_code)."'");
				
		if(!pg_affected_rows($result))							throw new UserError("Your vote was not found");
						
	}

}

/*

if( isset($_POST['cand_vote_id']) && isset($_POST['vote_email'])) {
	
	$success = CandVote::place_vote( $_POST['cand_vote_id'], $_POST['vote_email']);
	if ($success == FALSE) { //User data failed.
		CandVote::print_vote_form();
	}
	
}elseif( isset($_GET['verif']) ){
	CandVote::verify_vote($_GET['verif']);
}else{
CandVote::count_votes();
echo "<br>";

CandVote::print_vote_form();

}
*/

?>