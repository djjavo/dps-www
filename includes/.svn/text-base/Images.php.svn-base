<?php
class Images{
	public static function resize_proportionaly($rawimage,$x,$y){
		$original_x = imagesx($rawimage);
		$original_y = imagesy($rawimage);	
		if($x > $original_x || $y > $original_y) throw new UserError("Image is too small");
		
		$ratio = $original_x / $original_y;
		
		if($ratio >= ($x / $y))		$x = $y * $ratio;
		else								$y = $x / $ratio;
		
		$newimage = imagecreatetruecolor($x, $y);
		imagecopyresampled($newimage, $rawimage, 0, 0, 0, 0, $x, $y, $original_x, $original_y);
		return $newimage;
	}
	public static function resize_proportionaly_crop($rawimage,$target_x,$target_y){
		$original_x = imagesx($rawimage);
		$original_y = imagesy($rawimage);
		if($target_x > $original_x || $target_y > $original_y) throw new UserError("Image is to small");
		
		$newimage = imagecreatetruecolor($target_x,$target_y);
		$scale = max($target_x / $original_x,$target_y / $original_y);
		$trim_x = (($scale * $original_x) - $target_x)/$scale;
		$trim_y = (($scale * $original_y) - $target_y)/$scale;
		imagecopyresampled($newimage, $rawimage, 0, 0, 0+($trim_x/2), 0+($trim_y/2), $target_x, $target_y, $original_x-$trim_x, $original_y-$trim_y);
		return $newimage;
	}
	public static function resize_proportionaly_to_width($rawimage,$x,$min_y,$max_y){
		$original_x	= imagesx($rawimage);
		$original_y	= imagesy($rawimage);
		
		if($x > $original_x || $min_y > $original_y) throw new UserError("Image is to small");
		
		$ratio		= $x / $original_x;
		$y			= $original_y * $ratio;
		
		if($y > $max_y) throw new UserError("Image height is to small");
		if($y < $min_y) throw new UserError("Image height is to big");
		
		$newimage	= imagecreatetruecolor($x, $y);
		imagecopyresampled($newimage, $rawimage, 0, 0, 0, 0, $x, $y, $original_x, $original_y);
		return $newimage;
		
	}
	public static function rotate_90_clockwise($image){
		return imagerotate($image, 90, 0);
	}
	public static function rotate_90_anticlockwise($image){
		return imagerotate($image, -90, 0);
	}
	public static function createfrom($filename){
		switch(exif_imagetype($filename)){
			case IMAGETYPE_JPEG:
				return imagecreatefromjpeg($filename);
			case IMAGETYPE_GIF:
				return imagecreatefromgif($filename);
			case IMAGETYPE_PNG:
				return imagecreatefrompng($filename);
			case IMAGETYPE_WBMP:
				return imagecreatefromwbmp($filename);
			default:
				throw new UserError("Image is not a supported format. Supported formats are: jpeg, gif, png and bmp");
		}	
	}
}
?>
